<link rel="stylesheet" href="/css/global-components.css">

<div class="container-fluid px-4 py-2">
    <!-- 分类卡片区域 -->
  <div id="categoriesContainer">
      <!-- 加载指示器 -->
    <div class="text-center py-3" id="loading-indicator">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">加载中...</span>
        </div>
        <p class="mt-2">正在加载数据...</p>
      </div>
      
      <!-- 错误信息 -->
      <div class="alert alert-danger" role="alert" id="error-message" style="display: none;">
        <h4 class="alert-heading">加载失败!</h4>
        <p>无法加载域名数据。请检查网络连接或稍后再试。</p>
        <hr>
        <p class="mb-0" id="error-details"></p>
      </div>
      
      <!-- 域名内容区域 -->
      <div id="domains-content" style="display: none;">
      <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>域名分类列表</h2>
        <div class="d-flex">
          <button id="importBtn" class="btn btn-outline-primary me-2" type="button" title="导入域名配置">
            <i class="fas fa-file-import"></i> 导入
          </button>
          <button id="exportBtn" class="btn btn-outline-success me-2" type="button" title="导出域名配置">
            <i class="fas fa-file-export"></i> 导出
          </button>
          <button id="refreshData" class="btn btn-outline-secondary" type="button">
            <i class="fas fa-sync-alt"></i> 刷新数据
          </button>
          <input type="file" id="importFile" accept=".json" style="display: none;">
        </div>
      </div>
      
      <div class="card mb-4">
        <div class="card-body">
          <div class="row">
            <div class="col-md-5" style="padding-right: 25px;">
              <div class="form-group" style="margin-bottom: 15px;">
                <label for="domainSearch" style="display: block; margin-bottom: 8px; font-weight: bold;">关键字搜索:</label>
                <div class="input-group">
                  <input type="text" id="domainSearch" class="form-control" placeholder="输入域名关键字..." autofocus>
                  <button type="button" id="clearSearch" class="clear-button" title="清除搜索">✕</button>
                </div>
                <small style="display: block; margin-top: 5px;">支持模糊匹配</small>
              </div>
            </div>
            <div class="col-md-4" style="padding-left: 25px; padding-right: 15px;">
              <div class="form-group" style="margin-bottom: 15px;">
                <label for="categoryFilter" style="display: block; margin-bottom: 8px; font-weight: bold;">域名分类:</label>
                <select id="categoryFilter" class="form-select">
                  <option value="all">所有分类</option>
                  <option value="domestic">国内域名</option>
                  <option value="foreign">国外域名</option>
                </select>
              </div>
            </div>
            <div class="col-md-3" style="padding-left: 15px;">
              <div id="searchStats" class="text-muted" style="display: none; margin-top: 32px;">
                找到 <span id="foundDomains" class="fw-bold">0</span> 个域名
              </div>
            </div>
          </div>
        </div>
      </div>
      
        <div class="details-section" id="domain-categories">
          <!-- 分类卡片将通过JavaScript动态生成 -->
        </div>
      </div>
  </div>
</div>

<!-- 域名分类卡片模板 -->
<template id="categoryCardTemplate">
  <div class="card category-card mb-4">
    <div class="card-header">
      <h3 class="category-name"></h3>
      <span class="badge rounded-pill domain-count text-dark"></span>
      <p class="category-description text-muted"></p>
    </div>
    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-hover">
          <thead>
            <tr>
              <th>域名</th>
              <th>协议</th>
              <th>DNS服务器</th>
              <th>分类</th>
              <th>操作</th>
            </tr>
          </thead>
          <tbody id="domainList">
            <!-- 域名列表将通过JavaScript动态加载 -->
          </tbody>
        </table>
    </div>
  </div>
</div>
</template>

<style>
  /* 页面布局优化 */
  .container-fluid {
    max-width: 1400px;
  }
  
  /* 减少卡片间距 */
  .card {
    margin-bottom: 1rem;
        }

  .card-body {
    padding: 1rem;
  }
  
  /* 调整标题大小 */
  h2 {
    font-size: 1.5rem;
    margin-bottom: 0;
  }
  
  /* 减小表格内部间距 */
  .table th, .table td {
    padding: 0.5rem;
      }
  
  .domain-item {
    padding: 0.5rem 0.75rem;
    border-radius: 4px;
    margin-bottom: 0.5rem;
    background-color: #f8f9fa;
    transition: background-color 0.2s;
    border-left: 4px solid transparent;
  }
  
  .domain-item:hover {
    background-color: #e9ecef;
    border-left-color: #6c757d;
  }
  
  .category-card .card-header {
    border-bottom: 0;
    padding: 1rem 1.25rem;
  }
  
  .domestic-header {
    background-color: #e8f4fc;
    border-left: 5px solid #0d6efd;
  }
  
  .foreign-header {
    background-color: #fff8e8;
    border-left: 5px solid #fd7e14;
  }
  
  /* 添加国内域名数量标签的自定义样式 */
  .bg-info {
    background-color: #28a745 !important;
    color: white !important;
  }
  
  .server-badge {
    display: inline-block;
    padding: 0.4rem 0.8rem;
    border-radius: 20px;
    font-size: 0.85rem;
    font-weight: 500;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  }
  
  .domestic-server {
    background-color: #d1ecf1;
    color: #0c5460;
  }
  
  .foreign-server {
    background-color: #fff3cd;
    color: #856404;
  }
  
  .domain-list {
    max-height: 300px;
    overflow-y: auto;
    margin-top: 1rem;
    border-radius: 6px;
    padding: 0.5rem;
    background-color: white;
    border: 1px solid rgba(0,0,0,0.1);
  }
  
  /* 自定义滚动条 */
  .domain-list::-webkit-scrollbar {
    width: 8px;
  }
  
  .domain-list::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  
  .domain-list::-webkit-scrollbar-thumb {
    background: #c1c1c1;
    border-radius: 10px;
  }
  
  .domain-list::-webkit-scrollbar-thumb:hover {
    background: #a8a8a8;
  }
  
  mark {
    padding: 0.1em 0.3em;
    border-radius: 2px;
  }
  
  /* 域名分类卡片布局 - 垂直排列 */
  .details-section {
    display: block;
  }
  
  .detail-card {
    width: 100%;
    margin-bottom: 20px;
  }
  
  /* 表格样式 */
  .summary-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .summary-table th,
  .summary-table td {
    padding: 0.5rem;
    text-align: left;
  }
  
  .summary-table th {
    border-bottom: 1px solid #dee2e6;
  }
  
  .summary-table tbody tr:hover {
    background-color: rgba(0,0,0,0.03);
  }
  
  /* 修改域名计数的样式 */
  .domain-count {
    color: #000 !important;
    background-color: #f8f9fa !important;
    border: 1px solid #dee2e6;
    font-size: 1.1rem !important;
    font-weight: 600 !important;
    padding: 0.4rem 0.8rem !important;
  }
  
  /* 清除搜索按钮样式 */
  .clear-button {
    position: absolute;
    right: 3px;
    top: 3px;
    height: calc(100% - 6px);
    width: 26px;
    background-color: #6c757d;
    color: white;
    border: none;
    border-radius: 3px;
    font-size: 12px;
    font-weight: bold;
    cursor: pointer;
    z-index: 10;
    display: none;
    line-height: 1;
    padding: 0;
  }
  
  .clear-button:hover {
    background-color: #5a6268;
  }
  
  #domainSearch {
    padding-right: 40px;
  }
  
  /* 搜索框样式 */
  .input-group {
    position: relative;
    display: flex;
    width: 100%;
  }
  
  /* 搜索表单样式 */
  .form-group label {
    font-weight: 500;
    margin-bottom: 0.3rem;
  }
  
  /* 统一按钮样式 */
  .btn-fixed-width {
    width: 80px;
    text-align: center;
    justify-content: center;
    display: inline-flex;
    align-items: center;
    margin-right: 5px;
  }
  
  .btn-fixed-width i {
    margin-right: 4px;
  }
  
  .add-domain-btn {
    width: 80px;
    text-align: center;
    justify-content: center;
    display: inline-flex;
    align-items: center;
  }
  
  /* 刷新按钮样式 */
  #refreshData {
    width: 120px;
    text-align: center;
    justify-content: center;
    display: inline-flex;
    align-items: center;
  }
  
  #refreshData i {
    margin-right: 6px;
  }
  
  /* 导入导出按钮样式 */
  #importBtn, #exportBtn {
    width: 100px;
    text-align: center;
    justify-content: center;
    display: inline-flex;
    align-items: center;
  }
  
  #importBtn i, #exportBtn i {
    margin-right: 6px;
  }
</style>

<!-- 内嵌JavaScript代码 -->
<script>
// 全局变量和函数定义区
let domainData = null;
let filteredCategories = [];
let domainCategories; // 全局DOM元素引用
let loadingIndicator;
let errorMessage;
let errorDetails;
let domainsContent;

// 关闭模态框的全局函数
function closeModal(modal, backdrop) {
  if (!modal) return;
  modal.style.display = 'none';
  modal.classList.remove('show');
  modal.removeAttribute('aria-modal');
  modal.setAttribute('aria-hidden', 'true');
  document.body.classList.remove('modal-open');
  if (backdrop) backdrop.remove();
}

// 确认删除域名 - 定义为全局函数
function confirmDeleteDomain(domain, category) {
  if (confirm(`确定要删除域名 ${domain} 吗？此操作不可恢复。`)) {
    // 显示加载状态
    const buttons = document.querySelectorAll(`.btn-danger[onclick*="${domain.replace(/\*/g, '\\*')}"]`);
    
    // 如果没有找到按钮，可能是选择器有问题
    if (buttons.length === 0) {
      console.warn(`未找到删除按钮，尝试直接删除域名: ${domain}`);
    }
    
    // 设置按钮加载状态
    buttons.forEach(button => {
      const originalText = button.innerHTML;
      button.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> 删除中...';
      button.disabled = true;
    });
    
    // 发送API请求删除域名
    fetch(`/api/dns/custom-domains?domain=${encodeURIComponent(domain)}&category=${category}`, {
      method: 'DELETE'
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // 直接刷新数据，不显示成功提示
        fetchDomainData();
      } else {
        showAlertModal('错误', data.message || '删除域名失败', 'danger');
        
        // 恢复按钮状态
        buttons.forEach(button => {
          button.innerHTML = '<i class="fas fa-trash"></i> 删除';
          button.disabled = false;
        });
      }
    })
    .catch(error => {
      showAlertModal('错误', '删除域名时出错，请查看控制台', 'danger');
      
      // 恢复按钮状态
      buttons.forEach(button => {
        button.innerHTML = '<i class="fas fa-trash"></i> 删除';
        button.disabled = false;
      });
    });
  }
}

// 编辑域名 - 定义为全局函数
function editDomain(domain) {
  try {
    // 创建一个更美观的编辑模态框
    const editModalHTML = `
      <div id="editDomainModal" class="modal-wrapper" style="position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5); z-index:1050; display:flex; align-items:center; justify-content:center; opacity:0; transition:opacity 0.3s ease;">
        <div class="modal-dialog" style="width:100%; max-width:500px; margin:0 20px; transform:translateY(-20px); transition:transform 0.3s ease;">
          <div class="modal-content" style="border-radius:8px; box-shadow:0 5px 15px rgba(0,0,0,0.3); background-color:#ffffff;">
            <div class="modal-header" style="border-bottom:1px solid #dee2e6; padding:1rem; display:flex; align-items:center; justify-content:space-between; background-color:#f8f9fa; border-top-left-radius:8px; border-top-right-radius:8px;">
              <h5 class="modal-title" style="margin:0; font-weight:500; color:#212529;">编辑域名: ${domain}</h5>
              <button type="button" class="btn-close" style="background:transparent; border:none; font-size:1.5rem; font-weight:700; line-height:1; cursor:pointer; padding:0.5rem; color:#000;" onclick="closeEditModal()">&times;</button>
            </div>
            <div class="modal-body" style="padding:1rem; background-color:#ffffff;">
              <form id="editDomainForm">
                <div class="mb-3">
                  <label for="domainInput" class="form-label" style="display:block; margin-bottom:0.5rem; font-weight:500; color:#212529;">域名</label>
                  <input type="text" class="form-control" id="domainInput" value="${domain}" readonly style="width:100%; padding:0.375rem 0.75rem; font-size:1rem; border:1px solid #ced4da; border-radius:0.25rem; background-color:#e9ecef;">
                </div>
                <div class="mb-3">
                  <label for="protocolSelect" class="form-label" style="display:block; margin-bottom:0.5rem; font-weight:500; color:#212529;">协议</label>
                  <select class="form-select" id="protocolSelect" style="width:100%; padding:0.375rem 0.75rem; font-size:1rem; border:1px solid #ced4da; border-radius:0.25rem; background-color:#ffffff;">
                    <option value="custom">custom</option>
                    <option value="standard">standard</option>
                    <option value="dot">dot</option>
                    <option value="doh">doh</option>
                    <option value="doq">doq</option>
                  </select>
                </div>
                <div class="mb-3">
                  <label for="dnsInput" class="form-label" style="display:block; margin-bottom:0.5rem; font-weight:500; color:#212529;">DNS服务器</label>
                  <input type="text" class="form-control" id="dnsInput" style="width:100%; padding:0.375rem 0.75rem; font-size:1rem; border:1px solid #ced4da; border-radius:0.25rem; background-color:#ffffff;">
                </div>
                <div class="mb-3">
                  <label for="categorySelect" class="form-label" style="display:block; margin-bottom:0.5rem; font-weight:500; color:#212529;">分类</label>
                  <select class="form-select" id="categorySelect" style="width:100%; padding:0.375rem 0.75rem; font-size:1rem; border:1px solid #ced4da; border-radius:0.25rem; background-color:#ffffff;">
                    <option value="domestic">国内</option>
                    <option value="foreign">国外</option>
                  </select>
                </div>
              </form>
            </div>
            <div class="modal-footer" style="border-top:1px solid #dee2e6; padding:1rem; display:flex; align-items:center; justify-content:space-between; background-color:#f8f9fa; border-bottom-left-radius:8px; border-bottom-right-radius:8px;">
              <button type="button" class="btn btn-danger" style="padding:0.375rem 0.75rem; color:white; background-color:#dc3545; border:1px solid #dc3545; border-radius:0.25rem; cursor:pointer;" onclick="deleteSelectedDomain()">删除</button>
              <div>
                <button type="button" class="btn btn-secondary" style="padding:0.375rem 0.75rem; color:white; background-color:#6c757d; border:1px solid #6c757d; border-radius:0.25rem; cursor:pointer; margin-right:0.5rem;" onclick="closeEditModal()">取消</button>
                <button type="button" class="btn btn-primary" style="padding:0.375rem 0.75rem; color:white; background-color:#0d6efd; border:1px solid #0d6efd; border-radius:0.25rem; cursor:pointer;" onclick="saveEditedDomain()">保存</button>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // 先移除可能存在的旧模态框
    const oldModal = document.getElementById('editDomainModal');
    if (oldModal) {
      oldModal.remove();
    }
    
    // 添加到DOM
    document.body.insertAdjacentHTML('beforeend', editModalHTML);
    
    // 保存当前编辑的域名到全局变量，供保存和删除函数使用
    window.currentEditDomain = domain;
    
    // 添加动画效果
    setTimeout(() => {
      const modal = document.getElementById('editDomainModal');
      if (modal) {
        modal.style.opacity = '1';
        const dialog = modal.querySelector('.modal-dialog');
        if (dialog) {
          dialog.style.transform = 'translateY(0)';
        }
      }
    }, 10);
    
    // 尝试从domainData中查找域名信息并填充表单
    setTimeout(() => {
      try {
        if (domainData) {
          // 查找域名信息
          let domainInfo = null;
          let category = '';
          
          // 在国内和国外域名中查找
          for (const cat of ['domestic', 'foreign']) {
            const found = domainData[cat].find(item => item.domain === domain);
            if (found) {
              domainInfo = found;
              category = cat;
              break;
            }
          }
          
          if (domainInfo) {
            // 保存原始分类信息到全局变量，供保存时使用
            window.originalCategory = category;
            
            document.getElementById('protocolSelect').value = domainInfo.protocol || 'custom';
            document.getElementById('dnsInput').value = domainInfo.dns || '';
            document.getElementById('categorySelect').value = category;
          }
        }
      } catch (e) {
        console.error('填充域名信息时出错:', e);
      }
    }, 100);
    
  } catch (e) {
    console.error('显示编辑模态框时出错:', e);
    alert('显示编辑模态框时出错: ' + e.message);
  }
}

// 关闭编辑模态框
function closeEditModal() {
  const modal = document.getElementById('editDomainModal');
  if (modal) {
    // 添加关闭动画
    modal.style.opacity = '0';
    const dialog = modal.querySelector('.modal-dialog');
    if (dialog) {
      dialog.style.transform = 'translateY(-20px)';
    }
    
    // 等待动画完成后移除模态框
    setTimeout(() => {
      modal.remove();
    }, 300);
  }
}

// 显示警告提示窗口
function showAlertModal(title, message, type = 'warning') {
  // 设置不同类型的颜色
  const colors = {
    warning: '#ffc107',
    danger: '#dc3545',
    success: '#28a745',
    info: '#17a2b8'
  };
  
  const color = colors[type] || colors.warning;
  
  // 创建警告提示窗口HTML
  const alertModalHTML = `
    <div id="alertModal" class="modal-wrapper" style="position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5); z-index:1060; display:flex; align-items:center; justify-content:center; opacity:0; transition:opacity 0.3s ease;">
      <div class="modal-dialog" style="width:100%; max-width:400px; margin:0 20px; transform:translateY(-20px); transition:transform 0.3s ease;">
        <div class="modal-content" style="border-radius:8px; box-shadow:0 5px 15px rgba(0,0,0,0.3); background-color:#ffffff; border-top:5px solid ${color};">
          <div class="modal-header" style="border-bottom:1px solid #dee2e6; padding:1rem; display:flex; align-items:center; justify-content:space-between; background-color:#f8f9fa; border-top-left-radius:8px; border-top-right-radius:8px;">
            <h5 class="modal-title" style="margin:0; font-weight:500; color:#212529;">${title}</h5>
            <button type="button" class="btn-close" style="background:transparent; border:none; font-size:1.5rem; font-weight:700; line-height:1; cursor:pointer; padding:0.5rem; color:#000;" onclick="closeAlertModal()">&times;</button>
          </div>
          <div class="modal-body" style="padding:1rem; background-color:#ffffff;">
            <p style="margin-bottom:0; color:#212529;">${message}</p>
          </div>
          <div class="modal-footer" style="border-top:1px solid #dee2e6; padding:1rem; display:flex; align-items:center; justify-content:center; background-color:#f8f9fa; border-bottom-left-radius:8px; border-bottom-right-radius:8px;">
            <button type="button" class="btn btn-primary" style="padding:0.375rem 0.75rem; color:white; background-color:#0d6efd; border:1px solid #0d6efd; border-radius:0.25rem; cursor:pointer; min-width:100px;" onclick="closeAlertModal()">确定</button>
          </div>
        </div>
      </div>
    </div>
  `;
  
  // 先移除可能存在的旧警告窗口
  const oldModal = document.getElementById('alertModal');
  if (oldModal) {
    oldModal.remove();
  }
  
  // 添加到DOM
  document.body.insertAdjacentHTML('beforeend', alertModalHTML);
  
  // 添加动画效果
  setTimeout(() => {
    const modal = document.getElementById('alertModal');
    if (modal) {
      modal.style.opacity = '1';
      const dialog = modal.querySelector('.modal-dialog');
      if (dialog) {
        dialog.style.transform = 'translateY(0)';
      }
    }
  }, 10);
}

// 关闭警告提示窗口
function closeAlertModal() {
  const modal = document.getElementById('alertModal');
  if (modal) {
    // 添加关闭动画
    modal.style.opacity = '0';
    const dialog = modal.querySelector('.modal-dialog');
    if (dialog) {
      dialog.style.transform = 'translateY(-20px)';
    }
    
    // 等待动画完成后移除模态框
    setTimeout(() => {
      modal.remove();
    }, 300);
  }
}

// 保存编辑的域名
function saveEditedDomain() {
  const domain = window.currentEditDomain;
  const protocol = document.getElementById('protocolSelect').value;
  const dns = document.getElementById('dnsInput').value.trim();
  const category = document.getElementById('categorySelect').value;
  // 获取原始分类
  const originalCategory = window.originalCategory || category;
  
  if (!dns) {
    showAlertModal('警告', 'DNS服务器不能为空', 'warning');
    return;
  }
  
  // 构建请求数据
  const updatedData = {
    domain: domain,
    protocol: protocol,
    dns: dns,
    name: category === 'domestic' ? '国内' : '国外',
    category: category,
    originalCategory: originalCategory  // 使用保存的原始分类
  };
  
  console.log('提交更新数据:', updatedData);
  
  // 显示保存中状态
  const saveBtn = document.querySelector('#editDomainModal .btn-primary');
  const originalText = saveBtn.innerHTML;
  saveBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> 保存中...';
  saveBtn.disabled = true;
  
  // 发送API请求更新域名
  fetch('/api/dns/custom-domains', {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(updatedData)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // 关闭模态框
      closeEditModal();
      
      // 刷新数据
      fetchDomainData();
    } else {
      showAlertModal('错误', data.message || '更新域名失败', 'danger');
    }
  })
  .catch(error => {
    console.error('更新域名时出错:', error);
    showAlertModal('错误', '更新域名时出错，请查看控制台', 'danger');
  })
  .finally(() => {
    // 恢复按钮状态
    if (saveBtn) {
      saveBtn.innerHTML = originalText;
      saveBtn.disabled = false;
    }
  });
}

// 删除当前编辑的域名
function deleteSelectedDomain() {
  const domain = window.currentEditDomain;
  
  if (confirm(`确定要删除域名 ${domain} 吗？此操作不可恢复。`)) {
    // 查找域名分类
    let category = '';
    for (const cat of ['domestic', 'foreign']) {
      const found = domainData[cat].find(item => item.domain === domain);
      if (found) {
        category = cat;
        break;
      }
    }
    
    if (!category) {
      showAlertModal('错误', '无法确定域名分类，无法删除', 'danger');
      return;
    }
    
    // 显示删除中状态
    const deleteBtn = document.querySelector('#editDomainModal .btn-danger');
    const originalText = deleteBtn.innerHTML;
    deleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> 删除中...';
    deleteBtn.disabled = true;
    
    // 发送API请求删除域名
    fetch(`/api/dns/custom-domains?domain=${encodeURIComponent(domain)}&category=${category}`, {
      method: 'DELETE'
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // 关闭模态框
        closeEditModal();
        
        // 刷新数据，不显示成功提示
        fetchDomainData();
      } else {
        showAlertModal('错误', data.message || '删除域名失败', 'danger');
      }
    })
    .catch(error => {
      console.error('删除域名时出错:', error);
      showAlertModal('错误', '删除域名时出错，请查看控制台', 'danger');
    })
    .finally(() => {
      // 恢复按钮状态
      if (deleteBtn) {
        deleteBtn.innerHTML = originalText;
        deleteBtn.disabled = false;
      }
    });
  }
}

// 获取域名数据 - 定义为全局函数
function fetchDomainData() {
  // DOM元素初始化
  if (!domainCategories) {
    domainCategories = document.getElementById('domain-categories');
    loadingIndicator = document.getElementById('loading-indicator');
    errorMessage = document.getElementById('error-message');
    errorDetails = document.getElementById('error-details');
    domainsContent = document.getElementById('domains-content');
  }

  loadingIndicator.style.display = 'block';
  errorMessage.style.display = 'none';
  domainsContent.style.display = 'none';
  
  fetch('/api/dns/custom-domains')
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(response => {
      if (!response.success || !response.data) {
        throw new Error('获取数据失败：' + (response.message || '未知错误'));
      }
      
      const data = response.data;
      domainData = data;
      
      // 转换数据结构以适配模板
      const categories = [
        {
          id: 'domestic',
          name: '国内域名',
          description: '国内网站域名解析',
          domains: data.domestic,
          dnsServers: Array.from(new Set(data.domestic.map(d => d.dns))).map(ip => ({
            name: '国内DNS',
            ip: ip
          }))
        },
        {
          id: 'foreign',
          name: '国外域名',
          description: '国外网站域名解析',
          domains: data.foreign,
          dnsServers: Array.from(new Set(data.foreign.map(d => d.dns))).map(ip => ({
            name: '国外DNS',
            ip: ip
          }))
        }
      ];
      
      renderCategories(categories);
      filteredCategories = [...categories];
      
      loadingIndicator.style.display = 'none';
      domainsContent.style.display = 'block';
    })
    .catch(error => {
      loadingIndicator.style.display = 'none';
      errorMessage.style.display = 'block';
      errorDetails.textContent = error.message;
    });
}

// 渲染分类卡片 - 定义为全局函数
function renderCategories(categories) {
  const categoryCardTemplate = document.getElementById('categoryCardTemplate');
  domainCategories.innerHTML = '';
  
  if (!categories || categories.length === 0) {
    domainCategories.innerHTML = `
      <div class="alert alert-info" role="alert">
        没有找到域名分类数据。
      </div>
    `;
    return;
  }
  
  categories.forEach(category => {
    const categoryCard = categoryCardTemplate.content.cloneNode(true);
    const headerClass = category.id === 'domestic' ? 'domestic-header' : 'foreign-header';
    
    // 设置卡片头部样式
    categoryCard.querySelector('.card-header').classList.add(headerClass);
    
    // 填充分类信息
    categoryCard.querySelector('.category-name').textContent = category.name;
    categoryCard.querySelector('.domain-count').textContent = `${category.domains.length} 个域名`;
    categoryCard.querySelector('.category-description').textContent = category.description || '';
    
    // 获取表格主体元素
    const domainList = categoryCard.querySelector('#domainList');
    
    // 清空表格内容
    domainList.innerHTML = '';
    
    // 使用innerHTML一次性构建整个表格内容
    let tableHTML = '';
    
    // 添加所有域名行
    category.domains.forEach(domainObj => {
      const domain = domainObj.domain;
      const protocol = domainObj.protocol || 'custom';
      const dns = domainObj.dns;
      const categoryName = category.name;
      const categoryId = category.id;
      
      // 使用字符串转义来处理特殊字符
      const escapedDomain = domain.replace(/'/g, "\\'").replace(/"/g, '\\"');
      
      tableHTML += `
        <tr>
          <td>${domain}</td>
          <td>${protocol}</td>
          <td>${dns}</td>
          <td>${categoryName}</td>
          <td>
            <div class="btn-group-custom">
              <button class="btn btn-sm btn-primary btn-fixed-width" onclick="editDomain('${escapedDomain}')">
                <i class="fas fa-edit"></i> 编辑
              </button>
              <button class="btn btn-sm btn-danger btn-fixed-width" onclick="confirmDeleteDomain('${escapedDomain}', '${categoryId}')">
                <i class="fas fa-trash"></i> 删除
              </button>
            </div>
          </td>
        </tr>
      `;
    });
    
    // 添加新域名输入行
    tableHTML += `
      <tr class="add-domain-row">
        <td>
          <input type="text" class="form-control form-control-sm new-domain-input" placeholder="输入新域名...">
        </td>
        <td>
          <select class="form-select form-select-sm new-protocol-select">
            <option value="custom" selected>custom</option>
            <option value="standard">standard</option>
            <option value="dot">dot</option>
            <option value="doh">doh</option>
            <option value="doq">doq</option>
          </select>
        </td>
        <td>
          <input type="text" class="form-control form-control-sm new-dns-input" value="${category.dnsServers[0]?.ip || ''}">
        </td>
        <td>${category.name}</td>
        <td>
          <button class="btn btn-sm btn-success add-domain-btn" data-category="${category.id}">
            <i class="fas fa-plus"></i> 添加
          </button>
        </td>
      </tr>
    `;
    
    // 一次性设置表格内容
    domainList.innerHTML = tableHTML;
    
    domainCategories.appendChild(categoryCard);
  });
  
  // 为添加按钮添加事件监听
  setupAddDomainEventListeners();
}

// 为添加域名按钮设置事件监听器
function setupAddDomainEventListeners() {
  document.querySelectorAll('.add-domain-btn').forEach(button => {
    button.addEventListener('click', function() {
      const row = this.closest('tr');
      const domainInput = row.querySelector('.new-domain-input');
      const protocolSelect = row.querySelector('.new-protocol-select');
      const dnsInput = row.querySelector('.new-dns-input');
      const domain = domainInput.value.trim();
      const protocol = protocolSelect.value;
      const dns = dnsInput.value.trim();
      const category = this.dataset.category;
      
      if (domain && protocol && dns) {
        // 显示加载状态
        const originalText = this.innerHTML;
        this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> 处理中...';
        this.disabled = true;
        
        // 准备请求数据
        const domainData = {
          domain: domain,
          protocol: protocol,
          dns: dns,
          name: category === 'domestic' ? '国内' : '国外',
          category: category
        };
        
        // 发送API请求添加域名
        fetch('/api/dns/custom-domains', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(domainData)
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // 重置添加表单
            domainInput.value = '';
            protocolSelect.value = 'custom';
            dnsInput.value = '';
            
            // 刷新数据
            fetchDomainData();
          } else {
            showAlertModal('错误', data.message || '添加域名失败', 'danger');
          }
        })
        .catch(error => {
          console.error('添加域名时出错:', error);
          showAlertModal('错误', '添加域名时出错，请查看控制台', 'danger');
        })
        .finally(() => {
          // 恢复按钮状态
          this.innerHTML = originalText;
          this.disabled = false;
        });
      } else {
        showAlertModal('警告', '请输入完整的域名、协议和DNS服务器', 'warning');
      }
    });
  });
}

// 页面加载后执行
document.addEventListener('DOMContentLoaded', function() {
  // DOM 元素
  const categoriesContainer = document.getElementById('categoriesContainer');
  const categoryCardTemplate = document.getElementById('categoryCardTemplate');
  const domainSearch = document.getElementById('domainSearch');
  const categoryFilter = document.getElementById('categoryFilter');
  const searchStats = document.getElementById('searchStats');
  const foundDomains = document.getElementById('foundDomains');
  const clearSearch = document.getElementById('clearSearch');
  const importBtn = document.getElementById('importBtn');
  const exportBtn = document.getElementById('exportBtn');
  const importFile = document.getElementById('importFile');
  
  // 初始化全局DOM元素引用
  domainCategories = document.getElementById('domain-categories');
  loadingIndicator = document.getElementById('loading-indicator');
  errorMessage = document.getElementById('error-message');
  errorDetails = document.getElementById('error-details');
  domainsContent = document.getElementById('domains-content');
  
  const refreshDataBtn = document.getElementById('refreshData');
  
  // 页面加载时获取数据
  fetchDomainData();
  
  // 事件监听器
  refreshDataBtn.addEventListener('click', fetchDomainData);
  domainSearch.addEventListener('input', filterDomains);
  categoryFilter.addEventListener('change', filterDomains);
  
  // 导出功能
  exportBtn.addEventListener('click', exportDomains);
  
  // 导入功能
  importBtn.addEventListener('click', function() {
    importFile.click();
  });
  
  importFile.addEventListener('change', importDomains);
  
  // 添加清除搜索功能
  clearSearch.addEventListener('click', function() {
    domainSearch.value = '';
    domainSearch.focus();
    filterDomains();
  });
  
  // 初始隐藏清除按钮
  clearSearch.style.display = 'none';
  
  // 添加键盘快捷键
  document.addEventListener('keydown', function(e) {
    // 按下ESC键清除搜索框
    if (e.key === 'Escape') {
      domainSearch.value = '';
      domainSearch.blur();
      filterDomains();
    }
    
    // 按下/键聚焦到搜索框
    if (e.key === '/' && document.activeElement !== domainSearch) {
      e.preventDefault();
      domainSearch.focus();
    }
  });

  // 过滤域名
  function filterDomains() {
    const searchTerm = domainSearch.value.toLowerCase().trim();
    const selectedCategory = categoryFilter.value;
    
    if (!domainData) return;
    
    // 显示或隐藏清除按钮
    clearSearch.style.display = searchTerm ? 'block' : 'none';
    
    // 创建过滤后的分类数据
    let filteredCats = [];
    
    if (selectedCategory === 'all' || selectedCategory === 'domestic') {
      // 过滤国内域名
      const filteredDomesticDomains = domainData.domestic
        .filter(item => item.domain.toLowerCase().includes(searchTerm));
      
      if (filteredDomesticDomains.length > 0) {
        filteredCats.push({
          id: 'domestic',
          name: '国内域名',
          description: '国内网站域名解析',
          domains: filteredDomesticDomains,
          dnsServers: Array.from(new Set(domainData.domestic.map(d => d.dns))).map(ip => ({
            name: '国内DNS',
            ip: ip
          }))
        });
      }
    }
    
    if (selectedCategory === 'all' || selectedCategory === 'foreign') {
      // 过滤国外域名
      const filteredForeignDomains = domainData.foreign
        .filter(item => item.domain.toLowerCase().includes(searchTerm));
      
      if (filteredForeignDomains.length > 0) {
        filteredCats.push({
          id: 'foreign',
          name: '国外域名',
          description: '国外网站域名解析',
          domains: filteredForeignDomains,
          dnsServers: Array.from(new Set(domainData.foreign.map(d => d.dns))).map(ip => ({
            name: '国外DNS',
            ip: ip
          }))
        });
      }
    }
    
    // 更新过滤后的分类
    filteredCategories = filteredCats;
    
    // 渲染过滤后的结果
    renderCategories(filteredCats);
    
    // 更新搜索统计
    updateSearchStats();
  }
  
  // 更新搜索统计
  function updateSearchStats() {
    let totalDomains = 0;
    filteredCategories.forEach(cat => {
      totalDomains += cat.domains.length;
    });
    
    foundDomains.textContent = totalDomains;
    searchStats.style.display = totalDomains > 0 ? 'block' : 'none';
  }
  
  // 导出域名配置到JSON文件
  function exportDomains() {
    if (!domainData) {
      showAlertModal('警告', '没有可导出的数据', 'warning');
      return;
    }
    
    try {
      // 创建要导出的数据对象
      const exportData = {
        domestic: domainData.domestic,
        foreign: domainData.foreign,
        exportDate: new Date().toISOString(),
        version: '1.0'
      };
      
      // 转换为JSON字符串
      const jsonStr = JSON.stringify(exportData, null, 2);
      
      // 创建Blob对象
      const blob = new Blob([jsonStr], { type: 'application/json' });
      
      // 创建下载链接
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `domains_export_${new Date().toISOString().slice(0, 10)}.json`;
      
      // 触发下载
      document.body.appendChild(a);
      a.click();
      
      // 清理
      setTimeout(function() {
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
      }, 0);
      
      showAlertModal('成功', '域名配置已成功导出', 'success');
    } catch (error) {
      console.error('导出域名时出错:', error);
      showAlertModal('错误', '导出域名配置时出错: ' + error.message, 'danger');
    }
  }
  
  // 从JSON文件导入域名配置
  function importDomains(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    
    reader.onload = function(e) {
      try {
        const importedData = JSON.parse(e.target.result);
        
        // 验证导入的数据格式
        if (!importedData.domestic || !importedData.foreign || 
            !Array.isArray(importedData.domestic) || !Array.isArray(importedData.foreign)) {
          throw new Error('导入的文件格式不正确');
        }
        
        // 显示确认对话框
        if (confirm(`确定要导入 ${importedData.domestic.length + importedData.foreign.length} 个域名配置吗？这将替换现有配置。`)) {
          // 显示加载状态
          showLoadingModal('正在导入域名配置...');
          
          // 发送API请求导入域名
          fetch('/api/dns/custom-domains/import', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(importedData)
          })
          .then(response => {
            if (!response.ok) {
              throw new Error(`服务器响应错误: ${response.status} ${response.statusText}`);
            }
            return response.json();
          })
          .then(data => {
            closeLoadingModal();
            if (data.success) {
              showAlertModal('成功', `已成功导入 ${data.data.count || '所有'} 个域名配置（${data.data.domestic} 个国内域名，${data.data.foreign} 个国外域名）`, 'success');
              fetchDomainData(); // 刷新数据
            } else {
              showAlertModal('错误', data.message || '导入域名配置失败', 'danger');
            }
          })
          .catch(error => {
            closeLoadingModal();
            console.error('导入域名时出错:', error);
            showAlertModal('错误', '导入域名配置时出错: ' + error.message, 'danger');
          });
        }
      } catch (error) {
        console.error('解析导入文件时出错:', error);
        showAlertModal('错误', '解析导入文件时出错: ' + error.message, 'danger');
      }
      
      // 重置文件输入框，允许再次选择相同的文件
      event.target.value = '';
    };
    
    reader.onerror = function() {
      showAlertModal('错误', '读取文件时出错', 'danger');
      event.target.value = '';
    };
    
    reader.readAsText(file);
  }
  
  // 显示加载状态模态框
  function showLoadingModal(message = '处理中...') {
    // 创建加载提示窗口HTML
    const loadingModalHTML = `
      <div id="loadingModal" class="modal-wrapper" style="position:fixed; top:0; left:0; width:100%; height:100%; background-color:rgba(0,0,0,0.5); z-index:1060; display:flex; align-items:center; justify-content:center; opacity:0; transition:opacity 0.3s ease;">
        <div class="modal-dialog" style="width:100%; max-width:300px; margin:0 20px;">
          <div class="modal-content" style="border-radius:8px; box-shadow:0 5px 15px rgba(0,0,0,0.3); background-color:#ffffff;">
            <div class="modal-body" style="padding:1.5rem; display:flex; flex-direction:column; align-items:center; justify-content:center;">
              <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">加载中...</span>
              </div>
              <p style="margin-bottom:0; text-align:center;">${message}</p>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // 先移除可能存在的旧加载窗口
    const oldModal = document.getElementById('loadingModal');
    if (oldModal) {
      oldModal.remove();
    }
    
    // 添加到DOM
    document.body.insertAdjacentHTML('beforeend', loadingModalHTML);
    
    // 添加动画效果
    setTimeout(() => {
      const modal = document.getElementById('loadingModal');
      if (modal) {
        modal.style.opacity = '1';
      }
    }, 10);
  }
  
  // 关闭加载状态模态框
  function closeLoadingModal() {
    const modal = document.getElementById('loadingModal');
    if (modal) {
      // 添加关闭动画
      modal.style.opacity = '0';
      
      // 等待动画完成后移除模态框
      setTimeout(() => {
        modal.remove();
      }, 300);
    }
  }
});
</script>